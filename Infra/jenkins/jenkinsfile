pipeline {
    agent any

    environment {
        AWS_REGION = 'ap-northeast-2'
        AWS_ACCOUNT_ID = '935875533840'
        ECR_REPOSITORY = 'grpc-chat-server'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                echo "Git에서 소스코드 체크아웃"
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/xxoznge/golang-grpc-chat.git',
                        credentialsId: 'github-pat'
                    ]]
                ])
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Docker 이미지 빌드 시작"
                script {
                    dockerImage = docker.build("${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}")
                }
            }
        }

        stage('Login to AWS ECR') {
            steps {
                echo "ECR 로그인"
                script {
                    sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                echo "Docker 이미지 ECR에 푸시"
                script {
                    docker.withRegistry("https://${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com", '2641efca-548e-4dc1-b814-ef690f7254fa') {
                        dockerImage.push()
                    }
                }
            }
        }
    }

    post {
        success {
            echo '빌드 성공 - 이미지 ECR에 푸시 완료!'
        }
        failure {
            echo '빌드 실패!'
        }
    }
}
